
This document will be in spanish until its final version.

0. Índice
-------------------------------------------------------------------------------
   1. Propósito de este documento.
   2. ¿Qué podemos saber del mundo "legalmente" en cada momento?
   3. Diseño general de la lógica del bot
   4. Preguntas por responder
   5. ¿Qué influye en la decisión de un bot sobre qué hacer en cada momento?
   6. Ideas sueltas
   7. Misceláneo
-------------------------------------------------------------------------------

1. Propósito de este documento.
-------------------------------------------------------------------------------
En este documento de diseño se irá esbozando la lógica de nuestro bot: cómo
tomará sus decisiones en cada momento y en base a qué. 
-------------------------------------------------------------------------------

2. ¿Qué podemos saber del mundo "legalmente" en cada momento?
-------------------------------------------------------------------------------
- El mapa a posteriori.
- TODA la información sobre los enemigos visibles.
- La posición de los aliados (aunque no estén visibles).
-------------------------------------------------------------------------------

3. Diseño general de la lógica del bot
-------------------------------------------------------------------------------
- La idea es separar la lógica del bot en diversos módulos
   - Necesidad: decide el objeto que más necesita (vida, armadura, munición, 
   un arma mejor, etc) según el estado del propio bot.
   - Utilidad: decide el grado de utilidad del objeto más cercano para el bot
   (pe. si el objeto más cercano es un botiquín, el grado de utilidad podría 
   ser 100-vida_del_bot) -> NOTA: Normalizar grados de utilidad entre los
   diferentes objetos.
   - Agresivo-Pasivo: decide si atacar o no si ve enemigos en la zona.
      - Víctima: decide el enemigo al que atacar.
      - Combate: decide el mejor arma para atacar al enemigo elegido.
   - Experiencia: Ante la decisión escogida, el bot calcula las expectativas
   de éxito (nº de intentos exitosos de desarrollar la acción / nº de intentos 
   totales).

3.1. Módulo de Necesidad
=================================================
- Árbol de decisión en decision_tree_object.mm
=================================================

3.3. Agresivo/pasivo
=================================================
- Este módulo se activa cuando el bot ve enemigos. Basándose en la experiencia
decide si atacar o huir. 
Pasos en la toma de decisión:
	1. Calcular nivel_amenaza_total_enemigos = p1*life + p2*ammo + p3*dps + p4*potential_dps
	2. Calcular nivel_amenaza_bot
	3. Si nivel_amenaza_bot-nivel_amenaza_total_enemigos > theta -> Atacar.
	4. Atacar al enemigo con el menor nivel_amenaza. Posibles resultados.
		4a. Terminamos de matar al enemigo
		4b. El enemigo nos mata.
		4c. Perdemos al enemigo (se esconde y estamos sin verlo durante X 
		tiempo).
	5. Guardamos la experiencia en (diff-life, diff-ammo, diff-dps, 
	diff-potential-dps, n-fights, n-wins, n-looses).
		* n-fights puede ser diferente de n-wins + n-looses, ya que 
		n-fights - (n-wins + n-looses) >= 0 indica el nº de veces que perdemos
		de vista al enemigo.
	6. Aprendizaje: modificar los pesos de diff-life, diff-ammo, etc según su
	implicación en el resultado del combate.
	- ¿Clasificador bayesiano?
		- https://www.bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html
=================================================

-------------------------------------------------------------------------------

4. Preguntas por responder
-------------------------------------------------------------------------------
- ¿Un agente debe estar mirando hacia otro para verlo? ¿O basta con que no 
haya obstáculos entre los dos (aunque estén de espaldas)?

- ¿Las partidas serán siempre todos contra todos, por equipos, o ambos?
-------------------------------------------------------------------------------

5. ¿Qué influye en la decisión de un bot sobre qué hacer en cada momento?
-------------------------------------------------------------------------------
- Vida + armadura.
- Armas.
- Munición.
- Items especiales.

- Riesgo en la zona
	- Nº de enemigos en la zona.
	- Riesgo de cada enemigo visible:
	   - Armas
	   - Vida
	   - Municiones
      - Items especiales
   - Nº de aliados en la zona.
   - Valor de cada aliado visible:
      - Armas
	   - Vida
	   - Municiones
      - Items especiales
-------------------------------------------------------------------------------

5. Acciones posibles del bot
-------------------------------------------------------------------------------
- Atacar -> ¿Decidir a quién?
- Ir a por vida / armadura.
- Huir
- Buscar armas
- Buscar munición
- ¿Cambiar arma? -> ¿Siempre la más poderosa o usar otro criterio?
- Moverse por ahí.

5. Acciones posibles del bot
-------------------------------------------------------------------------------
- Atacar -> ¿Decidir a quién?
- Buscar vida / armadura
- Huir
- Buscar armas
- Buscar munición
- ¿Cambiar arma? -> ¿Siempre la más poderosa o usar otro criterio?


Acciones deshechadas
- ¿Explorar? (NO, ya sabemos el mapa desde el principio).
-------------------------------------------------------------------------------

6. Ideas sueltas
-------------------------------------------------------------------------------
- Si vemos a un enemigo corriendo hacia un botiquín / armadura, tirar granadas 
	o misiles contra el botiquín / armadura.

- Asociar información sobre cómo actua a cada enemigo. Por ejemplo: vemos a un
	bot que siempre hace lo mismo cuando nos ve -> nos adelantamos a sus 
	movimientos.
	- O si vemos un bot que es malo, vamos a por ese siempre. xD
		- (Podemos obtener información de una entidad por el nombre).

- Ir observando la velocidad en la que va cada enemigo y atacar más adelante 
	(granadas y eso).

- Estrategia: esperar al lado de la invulnerabilidad y esperar un tiempo. Si
aparece un enemigo, coger la invulnerabilidad para aprovecharla al máximo. xD
-------------------------------------------------------------------------------

7. Misceláneo
-------------------------------------------------------------------------------

Crear waypoints a partir del mapa
-------------------------------------------------
1. Te conectas como cliente
2. Abres la consola.
3. En consola pones "record <nombre_fichero>"
4. Te mueves por el mapa
5. En consola pones "stop"
6. El cconjunto de waypoints se guardan en ~/.yq2/baseq2/demos/<nombre_fichero>.dm2
-------------------------------------------------

BSP
-------------------------------------------------
1. Buscar "q2dm1.bsp".
-------------------------------------------------


alias jess='~/AIA/Jess71p2/bin/jess <<< "(batch AIJess.clp)(reset)(run)(facts)"'
-------------------------------------------------------------------------------

